# Configuration file of vAmigaBM (vAmiga Bare Metal), Dirk W. Hoffmann, 2021

# vAmiga is an Amiga emulator that was originally developed as a native
# application for macOS. vAmigaBM (Bare Metal) is a fork of this project that
# brings the emulator to a variety of other platforms. The application is
# based on SFML (Simple and Fast Multimedia Library) and can be ported with
# little effort to any hardware platform supporting this framework.

# This file is the main configuration file of vAmigaBM. It is read in when the
# application is started and defines the initial configuration of the virtual
# computer. You can change it at will and individualize your Amiga as you like.
# It is also possible to use a different configuration file if you wish. Simply
# specify the name of this file as a command line parameter when launching
# vAmigaBM.

# Hint: While the emulator is running, you can open the debug console at any
# time by pressing F11. Among other things, the console lets you view and
# change the currently used configuration. Please note that some options, such
# as the size of the main memory, can only be changed when the Amiga is powered
# off. Other options, like the various compatibility settings, support hot
# plugging. They can be changed even if the Amiga is running.

# The debug console is also the best place to learn more about the syntax of
# each command. By pressing the TAB key twice, the console will show you all
# the options offered by the currently typed command.

# In the rest of this document, we will walk through all configuration options
# step-by-step, explaining each of them. For one thing, this will teach you how
# to configure the emulator. For another, it will give you an overview of the
# functionality of vAmigaBM.

# We start out with what is probably the most important configuration option,
# the selection of the Kickstart ROM. Please note that vAmiga does not come
# with any an original Commodore ROM. All Amiga ROMs are the intellectual
# property of the company Cloanto and are distributed for a fee. However, if
# you have purchased a Kickstart ROM legally, you can use it in vAmiga without
# difficulty.

# To install a ROM, all you have to do is uncomment the following line and
# insert the correct filename.
# memory load rom /tmp/kickstart.rom

# If vAmiga is started with no Kickstart ROM specified, you have the option to
# install an Aros replacement ROM. This is an open-source kickstart variant
# that is freely redistributable. Please be aware that not all Amiga programs
# are compatible with the replacement ROMs. To achieve high compatibility, we
# therefore recommend the purchase of the original roms.

# Should you decide to use the Aros ROMs, you may notice that the Amiga has two
# different ROMs installed. This is due to the size of the Aros ROM, which
# significantly exceeds the maximum size of 512 MB. For this reason, the Aros
# ROM has been split into two separate ROMs. The first one appears in memory at
# the same addresses as the original Kickstart ROM. The second one appears in
# address range $E00000 - $E7FFFF.

# Rom extensions can also be installed manually. If you wish to do so, please
# uncomment the following commands and insert the correct file name:
# memory load ext /tmp/extended.rom
# memory set extstart e0

# The second statement determines the memory area the Rom extension is mapped
# in. Possible values are e0 and f0. In the latter case, the Rom becomes
# visible in address range $F00000 - $F7FFFF.

# Next, we configure the memory of our Amiga. With 512 KB Chip RAM and 512 KB
# Slow RAM we choose a configuration that was common back in the day. Chip RAM
# refers to the factory-installed memory which is located on the motherboard.
# Slow RAM refers to extended memory. In the case of the Amiga 500, this memory
# was installed by inserting a memory expansion card into the trapdoor slot on
# the bottom of the computer case.
memory set chip 512
memory set slow 512

# Independt of the selected amout of Chip and Slow RAM, you may optionally add
# up to 8 MB of Fast-Ram. We refrain from doing this in the standard
# configuration, because not all Amiga programs can get along with Fast RAM.
memory set fast 0

# If you owned an Amiga 500 like me and extended it with a Trapdoor memory
# card, you most likely had an real time clock installed, too. At that time,
# RTCs were additionally installed on most memory expansion cards. They can be
# easily recognized by the battery, which is required to keep the register
# contents alive. In the Amiga 2000, the real-time clock was standard and
# installed directly on the motherboard. For our Amiga, we choose a real-time
# clock from Oki, which was a frequently used model back in the day.
rtc set model OKI

# Internally, the Amiga maps the RTC registers into a special memory area. This
# means the communication with the real-time clock happens as if its registers
# were a regular part of memory. It should be noted that the real-time clock
# does not appear in the same memory range in every Amiga model. Commodore had
# changed the location in the course of time.

# However, such model dependencies do not only affect the real-time clock.
# Within the 24-bit wide address space some memory areas are mirrored. That
# means we can reach one and the same target, e.g. a custom chip register,
# through several different addresses. A programmer could therefore just as
# well use an address from the mirrored area instead of the officially
# documented one, and many programmers did. Unfortunately, the mirrored areas
# are not the same in all Amiga models either. Overall, this means that we are
# confronted with a number of different memory layouts, and we need to tell the
# emulator which memory layout to use. In our virtual Amiga we recreate the
# memory layout of the classic Amiga 500, the computer of my youth.
memory set bankmap A500

# Before we continue with the next components, we set the remaining memory
# parameters. First, we instruct vAmiga to wait for a free data bus each time
# it accesses a memory cell in Slow RAM. This is exactly what happens in a real
# Amiga and the reason for the name "Slow" RAM by the way.
memory set slowramdelay yes

# The next two options decide which values should be written into RAM on
# startup and which values should be put on the data bus if a program reads
# from unmapped memory.
memory set RAM_INIT_PATTERN ZEROES
memory set OPT_UNMAPPING_TYPE FLOATING
