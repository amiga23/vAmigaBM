vAmiga ist eine Amiga-Emulator, der ursprünglich als native Applikation für
macOS entwickelt wurde. vAmiga emuliert einen Commodore Amiga 1000, Amiga 500
oder Amiga 2000 in hoher Genauigkeit.

vAmiga BM (Bare Metal) ist ein Ableger dieses Emulators,
der eine einfachere Bedienungsoberfläche aufweist, dafür aber auf einer
Vielzahl verschiedener Hardware-Plattformen betrieben werden kann. vAmiga BM
basiert auf der Simple and Fast Multimedia Library (SFML) und lässt sich auf
den meisten Plattformen betreiben, die SFML untersützen.

Die vorliegende Konfigurationsdatei wird beim Start von vAmiga BM eingelesen
und konfiguriert den Emulator. Alle Optionen können ihren Bedürfnissen
enstsprechend geändert werden.
Tipp: Wenn Sie wissen möchten, welche Wahlmöglichkeiten ein bestimmtes
Kommando bietet, so können sie dies auf einfache Weise in der Debug-Konsole
herausbekommen. Öffnen Sie die Konsole mit F12 und drücken Sie zweimal die TAB-Taste.
Sie bekommen dann einen Hilfetext angezeigt, der sie mit weiteren Anweisungen
versorgt.

Wir werden Sie durch die Konfigurationsdatei führen und die einzelnen Optionen
genauer erklären.

Wir beginnen mit der wichtigsten Konfigurationsoption, der Auswahl des
Kickstart-Roms. vAmiga beinhaltet keine original Commodore-Roms, da diese das
geistige Eigentum der Firma Cloanto sind. Falls Sie von Cloato ein Kickstart-Rom
kostenpflichtig erworben haben, können sie dieses problemlos in vAmiga verwenden.
Verwenden Sie hierzu das folgende Kommando:
# memory load rom /tmp/kickstart.rom

Wird vAmiga ohne die Angabe eines Kickstart-Roms gestartet, erhalten sie die
Option die Aros replacement Roms zu installieren, allerdings sind nicht alle
Amiga-Programme mit diesen Roms kompatibel. Um eine hohe Kompatibilität zu erziehlen,
empfehlen wir den Einsatz der Original Roms.

vAmiga unterstützt die Emulation einer Rom-Erweiterung. Hierbei handelt es sich
um ein zusätzliches Rom, das, genau wie das Kickstart-Rom, an einer bestimmten
Speicheradresse eingeblendet wird. Wenn Sie ein solches Rom benötigen, können
sie es folgendermaßen laden:
# memory load ext /tmp/kickstart.rom

Das folgende Kommando legt fest, in welchem Speicherbereich eine Rom-Erweiterungen
eingeblendet wird. Möglich sind die Speicherbereiche $xxxx - $xxxx und $xxxx - $xxxx.
# memory set extstart e0

Als nächstes konfigueren den Speicher des Amiga. Wir wählen eine Konfiguration
mit 512 KB Chip Ram und 512 KB Slow Ram. Slow Ram ist der Erweiterungsspeicher,
der z.B. beim Amiga 500 über die Trapdoor in Form einer Speichererweiterungskarte
hinzugefügt werden konnte. Optional können Sie dem Amiga bis zu 8 MB Fast Ram
hunzufügen. Wir verzichten in der Standardkonfigutation darauf, da sich manche
Programm nicht mit einer Fast-Ram-Erweiterung vertragen.
#memory set chip 512
#memory set slow 512
#memory set fast 0

Neben dem RAM, das wir soeben konfiguriert haben, existieren in einem Amiga
zahlreiche Speicherbereiche, die eine Sonderfunktion besitzen. So werden z.B.
die Custom-Chips in einem bestimmten Speicherbereich angesprochen, genau wie
die CIA-Chips oder die Echtzeituhr. Ferner sind manche Speicherbereiche gespiegelt,
d.h., wir können ein und dieselbe Zielkomponente in diesem Fall über mehrere
Addressen ansprechen. Formal wird das memory layout wird über die sogenannte Bank map
festgelegt, die sich unter den Amiga-Modelle unterscheidet. Wir emulieren hier
die Bank map eines Amiga 500:
# memory set bankmap A500

Als nächstes legen wir noch eine weitergehende Speicherparameter fest. Zunächst
erlauben wir vAmiga, nur dann auf das Slow Ram zuzugreifen, wenn der Datenbus
frei ist. Dies entpsricht dem realen Verhalten eines richtigen Amigas:
#memory set slowramdelay yes

Die nächsten beiden Optionen legen fest, mit welchen Werten der Ram-Speicher
unseres Amiga beim Start initialisiert wird und welche Werte wir auf dem
Datenbus lesen, wenn auf nicht gemappte Speicherbereiche zugegriffen wird:
#memory set RAM_INIT_PATTERN ZEROES
#memory set OPT_UNMAPPING_TYPE FLOATING

Ein richtiger Amiga unterstützt bis zu 4 Diskettenlaufwerke. Das interne Laufwerk war
immer vorhanden und wurde als df0 bezeichnet. Zusätzlich konnten drei externe
Diskettenlaufwerke hinzugefügt werden, die die Kennungen df1, df2 und df3
erhielten. Da die Arbeit auf einem Amiga mit nur einem Diskettenlaufwerk mit
mit einem einzigen Laufwerk durch häufige Diskettenwechsel begleitet wurde,
fügen wir unserem Amiga ein externes 3.5" Laufwerk hinzu.
#df1 connect
#df2 disconnect
#df3 disconnect

vAmiga unterstützt DD-Laufwerke (double density) und HD-Laufwerke (high density).
Wir wählen ein DD-Laufwerk, da es die höchste Kompatibilität bietet.
#drive set type DRIVE_DD

vAmiga kann Diskettenlaufwerke in verschiedenen Kompatibilitätsstufen
emulieren. Die schnellsten Laufwerke bezeichnen wir als Turbo drives. Hier
wird bei einem Diskettenzugriff die angefragte Anzahl an Datenworten auf einen
Schlag in den Speicher geladen. Dies ist schnell, aber nicht mit allen Programmen
kompatibel. Um eine hie hohe Kompatibilität zu gewährleisten, wählen wir eine
akkurate Emulation, die den Datentransfer für jedes Byte einzeln emuliert.
# df0 set speed 1

Ferner weisen wir an, die mechanische Eigenschaften der Diskettenlaufwerke zu
emulieren. Durch die Aktivierung dieser Option emuliert vAmiga die Verzögerungszeiten
des Spindelmotors sowie die Verzögerungen, die der Schreib-Lesekopf benötigt,
um zwischen zwei Cylindern zu wechseln.
#diskcontroller set emulate mechanics

TODO:
OPT_LOCK_DSKSYNC,
OPT_AUTO_DSKSYNC,

Als nächstes konfigurieren die restlichen Komponenten des Amiga. Hierzu gehören
die beiden CIAs, die Custom-Chips, die Echtzeiturhr sowie die
Peripherie-Komponenten wie die Tastatur.

Im Amiga verichten zwei Peripheriebausteine (Complex Interface Adapters,
kurz CIAs) vom Typ MOS 8520 ihren Dienst. Diese Chips hatte Commodore bereits
im C64 für die Kommunikation mit der Außenwelt eingesetzt, allerdings in einer
Vorgängervariante, dem MOS 6526. Beide Chips weisen eine sehr ähnliche
Funktionalität auf, sind aber nicht identisch. Einer der größeren Unterschiede
betrifft die TOD-Clock. Während diese Komponente im C64 die Rolle einer echten
Time-of-day clock übernimmt, wurde sie in der Amiga-Version zu einem 24-Bit-Zähler
umgestaltet. Tatsächlich weist dieser Zähler einen Hardware-Fehler auf, der
landläufig als TOD-Bug bezeichnet wird. Um eine hohe Kompatibilität zu
gewährleisten, weisen wir vAmiga an, diesen Bug zu emulieren:
# cia set todbug true

Eine andere wichtige Eigenschaft betrifft die Anbindung der CIAs an die CPU.
Die CIAs werden über die sogenannte E-clock betrieben, einem Taktsignal, dass
aus dem Takt der CPU gewonnne wird und um den Faktor 10 langsamer arbeitet.
Aufgrund der unterschiedlichen Taktfrequenzen müssen alle CIA-Zugriffe
zunächst mit dem Taktsignal der CPU synchronisiert werden, dem sogenannten
E-clock-syncing. Auch hier weisen wir vAmiga an, dieses Feature zu emulieren:
# cia set eclocksync true

Wir kommen zum Custom Chip Set, dem Alleinstellungmerkmal des Amiga zur damaligen Zeit.
Wir beginnen mit Agnus, der im Amiga eine zentrale Aufgabe übernimmt. Er
beinhaltet den DMA-Controller und regelt das zusammenspiel der verschiedenen
Komponenten. vAmiga unterstützt drei Agnus Variante: Der Agnus ... ist Bestandteil
des OCS. Er wurde in den älteren Amiga verbaut und kann 512 MB Chip Ram adressieren.
In späteren Modellen wurde der OCS Agnus durch einen ECS Agnus ersetzt (Enhanced Chip Set).
Die beiden ECS-Varianten unterscheiden sich hauptsächlich in der Größe des
adressierbaren Speichers. Agnus ... gewährt Zugriff auf 1 MB Chip Ram und Agnus ...
auf 2 MB.
#agnus set model ...

Der ECS-Agnus besitzt ein interessantes Feature. Wird ein Amiga mit diesem Chip
in einer Konfiguration mit 512 MB Chip Ram und 512 Slow Ram betrieben, dann blendet
Agnus das Slow-Ram zusätzlich hinter dem Chip Ram ein. In vAmiga lässt sich dieses
Verhalten wie folgt aktivieren:
#agnus set slowrammirror yes

Mit dem Copper und dem Blitter enthält Agnus zwei Teikomponenten, die dem Computer
zur damaligen Zeit ein Alleinstellungsmerkmal gewährten. Mit dem Blitter war
es möglich, verschiedene Speicherblöcke einzulesen, sie miteinander zu kombinieren
und das Resultat an einer anderen Stelle im Speicher abzulegen. Der Blitter operierte
dabei völlig unabhängig von der CPU. vAmiga bietet für die Emulation des Blitters
drei verschiedene Kompatibilitätsstufen an. In Stufe 0 wird der FastBlitter
aktiviert. Dieser führt die komplette Blitter-Operation auf einen Schlag aus.
Diese Stufe bietet die höchsten Geschwindigkeit, aber die geringste Kompatibilität.
In Stufe 2 wird der Blitter akkurat emuliert. Jedes Datenwort wird einzeln kopiert,
taktzyklengenau wie in einem richtigen Amige. Stufe 1 ist eine Mischform. In ihr
wird znächst der FastBlitter aktiviert, d.h., es werden alle Datenworte auf einen
Schlag kopiert. Danach wird nur noch das Bus-Scheduling simuliert. Der Blitter
blockiert den Datenbus zu genau denjenigen Zeitpunkten, an denen der Bus in
Stufe 2, der höchsten Kompatibilitässtufe, belegt wird.
#blitter set accuracy 2

Als nächstes konfigurieren wir Denise, den Video-Chip des Amiga. Wir beginnen
mit der Auswahl des Chip-Modells:
#denise set revision ???

Der ausgewählte Chip ist Bestandteil des Original Chipsets (OCS) und wurde
in allen Amiga 1000, Amiga 500 und Amiga 2000 verbaut. Im Amiga 500+ hingegen
verrichtet ein ECS-Denise seinen Dienst, der höhere Auflösungen und zusätzliche
Grafik-Modi unterstützt. Dieser Chip wird von vAmiga jedoch nicht unterstützt.

Mit den folgenden Kommandos geben wir Denise wichtige Parameter für die
Farbgenerierung an die Hand. Wir wählen eine Standard-Farbpalette, und setzen
die Helligkeit, den Kontrast und die ...:
#denise set palette COLOR
##denise set hue  NOT SUPPORTED YET

Eine wichtige Teilaufgabe von Denise ist die Verwaltung der Sprites. Hierzu
gehören nicht nur die Pixelerzeugung, sondern auch die Kollision von Sprites
mit den Playfiels oder die Kollision von Sprites untereinander. Da die
Kollisionserkennung zum einen nur von sehr wenigen Spielen verwendet wird und
zum anderen eine gewisse Rechenleistung erfordert, lässt sich Kollisionserkennung
in vAmiga abschalten. Falls sie dies wünschen, setzen die folgenden Optionen auf
false:
#denise set OPT_CLX_SPR_SPR yes
#denise OPT_CLX_SPR_PLF yes
#denise OPT_CLX_PLF_PLF yes

Als nächstes Konfigurieren wir die Audio-Einheit von vAmiga. Der erste Punkt
ist die Sampling-Methode, mit der wir bestimmen können, ob die von Paula
generierten Sound-Samples interpoliert werden sollen, und wenn ja, auf welche
Weise. Wir wählen die Nächste-Nachbar-Methode, die einen guten Kompromiss
zwischen Geschwindigkeit und Qualität ist.
#audio set sampling NEAREST

Jetzt ist die Lautstärke dran. vAmiga erlaubt es uns, die Lautstärke für jeden
der vier von Paula generierten Audio-Kanäle einzeln einzustellen.
#audio volume channel0 50
#audio volume channel1 50
#audio volume channel2 50
#audio volume channel3 50

Als nächstes stellen wir ein, wie vAmiga die vier Kanäle auf den linken und den
rechten Lautsprecherausgang verteilen soll. Ein echter Amiga gibt die Kanäle
? und ? links und die Kanäle ? und ? rechts aus. In vAmiga bilden wir dies
folgendermaßen nach:
#audio volume pan0 30 ?
#audio volume pan1 70 ?
#audio volume pan2 70 ?
#audio volume pan3 30 ?

Jetzt legen wir noch die Lautstärke des linken und die Lautstärke des rechten
fest. Diese lassen sich in vAmiga unabhängig von den Kanal-Lautstärken verstellen:
#audio volume channelL 50
#audio volume channelR 50

Als nächstes konfigurieren wir die Echtzeituhr. vAmiga untersützt die Emulation
einer Echtzeituhr wie sie im Amiga 2000 serienmäßig installiert war und in den
beiden anderen Modelle zusätzlich nachgerüstet werden konnte. Für unseren Amiga
wählen wir eine Echtzeituhr vom Typ Oki:
# rtc set model OKI

Als nächstes konfigurieren wir die Tastatur. vAmiga unterstützt zwei verschiedene
Emulations-Modi. Im ersten werden die eigegeben Keycodes direkt in das entsprechende
CIA-Register geschrieben. Dieser Modus ist schneller, aber weniger akkurat als
der zweite, der die Keycodes Bit für Bit an den CIA übermittelt, genauso wie
ein echter Amiga. Wir wählen die zweite, akkurate Variante:
#OPT_ACCURATE_KEYBOARD

Nach dem Einlesen dieser Datei ist unser Amiga zwar vollständig konfiguriert.
Da der Amiga aber noch ausgeschaltet ist, zeigt vAmiga BS den Startbildschirm
und sie haben sie Möglichkeit, den Emulator mit einem Tastendruck einzuschalten.
Falls sie den Startbildschirm überspringen möchten, können sie den Amiga auch
direkt aus diesem Skript heraus einschalten, mit diesem Kommando:
#amiga power on
#amiga run
